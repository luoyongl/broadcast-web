package cn.wtu.broadcast.controller.system;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import cn.wtu.broadcast.controller.BaseController;
import cn.wtu.broadcast.openapi.api.RegionFeatureService;
import cn.wtu.broadcast.openapi.model.BRegionalFeatures;
import cn.wtu.broadcast.openapi.vo.WangEditorVO;
import cn.wtu.broadcast.parent.pojo.BroadcastResult;

@Controller
@RequestMapping("systemManage/regionFeature")
public class RegionFeatureController extends BaseController{
	
	@GetMapping
	public String ui(Model model){
		List<BRegionalFeatures> oneList = regionFeatureService.selectFeaturesByBriefClassification(1);
		List<BRegionalFeatures> twoList = regionFeatureService.selectFeaturesByBriefClassification(2);
		List<BRegionalFeatures> threeList = regionFeatureService.selectFeaturesByBriefClassification(3);
		
		model.addAttribute("realOneList", oneList);
		model.addAttribute("twoList", twoList);
		model.addAttribute("threeList", threeList);
		return "systemManage/regionFeature";
	}

	/**
	 * @param model
	 * @return 简介页面
	 */
	@RequestMapping("/showreview")
	public String showreview(Model model){
		List<BRegionalFeatures> oneList = regionFeatureService.selectFeaturesByBriefClassification(1);
		List<BRegionalFeatures> twoList = regionFeatureService.selectFeaturesByBriefClassification(2);
		List<BRegionalFeatures> threeList = regionFeatureService.selectFeaturesByBriefClassification(3);
		List<BRegionalFeatures> fourList = regionFeatureService.selectFeaturesByBriefClassification(4);
		
		/*List<BRegionalFeatures> realOneList = new ArrayList<BRegionalFeatures>();
		
		for (BRegionalFeatures one : oneList) {	
			BRegionalFeatures realOne = new BRegionalFeatures();
			String str1 = one.getfRichTextContent().substring(0, one.getfRichTextContent().indexOf("img"));
			String str2 = str1.substring(0, str1.length()-1);
			String str3 = one.getfRichTextContent().substring(one.getfRichTextContent().indexOf("img"), one.getfRichTextContent().length());
			String str4 = str3.substring(str3.indexOf(">"), str3.length());
			String str5 = str4.substring(1, str4.length());
			realOne.setfRichTextContent(str2+str5);
			realOne.setfId(one.getfId());
			realOne.setfContent(one.getfContent());
			realOne.setfImageUrl(one.getfImageUrl());
			realOneList.add(realOne);
		}*/
		//model.addAttribute("realOneList", realOneList);
		model.addAttribute("realOneList", oneList);
		model.addAttribute("twoList", twoList);
		model.addAttribute("threeList", threeList);
		model.addAttribute("fourList", fourList);
		return "systemManage/regionReview";
	}

	@Autowired
	private RegionFeatureService regionFeatureService;

	private static Logger logger = LoggerFactory.getLogger(RegionFeatureController.class);
	
	/**
	 * 
	 * @param pageNumber
	 * @param pageSize
	 * @return BroadcastResult
	 */
	@GetMapping("/list")
	@ResponseBody
	public BroadcastResult programList(@RequestParam(defaultValue = "1", required = false) Integer pageNumber,
			@RequestParam(defaultValue = "10", required = false) Integer pageSize
			) {
		Map<String, Object> paramMap = new HashMap<>();
		paramMap.put("pageNo", pageNumber);
		paramMap.put("pageSize", pageSize);
		
		return BroadcastResult.ok(regionFeatureService.queryPageByParam(paramMap));
	}
	
	/**
	 * 增加简介
	 * @param bRegionalFeatures
	 * @param fBriefClassification
	 * @return BroadcastResult
	 */
	@RequestMapping(value="/add")
    @ResponseBody
    public BroadcastResult add(BRegionalFeatures bRegionalFeatures,Integer fBriefClassification){
		Boolean result = regionFeatureService.addBRegionalFeaturesSynopsis(bRegionalFeatures, fBriefClassification);
        if(result){
            return BroadcastResult.build(200,"保存成功");
        }else {
            return BroadcastResult.build(200,"保存失败");
        }
    }
	
	/**
	 * 增加特色图片
	 * @param bRegionalFeatures
	 * @param fBriefClassification
	 * @return BroadcastResult
	 */
	@RequestMapping(value="/addimage")
    @ResponseBody
    public BroadcastResult addimage(BRegionalFeatures bRegionalFeatures,Integer fBriefClassification){
		Boolean result = regionFeatureService.addBRegionalFeatures(bRegionalFeatures);
        if(result){
            return BroadcastResult.build(200,"增加成功");
        }else {
            return BroadcastResult.build(200,"增加失败");
        }
    }
	
	/*@RequestMapping(value="/add123",method = RequestMethod.GET)
	@ResponseBody
	public BroadcastResult add222(){
		System.out.println("2019");
		List<BRegionalFeatures> list = regionFeatureService.selectFeaturesByBriefClassification(4);
		return BroadcastResult.ok(list);

	}*/
	
	/**
	 * 跳转预览页面（调试阶段）
	 * @param bRegionalFeatures
	 * @param fBriefClassification
	 * @param model
	 * @return String
	 */
	@RequestMapping("/review")
    @ResponseBody
    public String review(BRegionalFeatures bRegionalFeatures,Integer fBriefClassification,Model model){
		List<BRegionalFeatures> oneList = regionFeatureService.selectFeaturesByBriefClassification(1);
		List<BRegionalFeatures> twoList = regionFeatureService.selectFeaturesByBriefClassification(2);
		List<BRegionalFeatures> threeList = regionFeatureService.selectFeaturesByBriefClassification(3);
		List<BRegionalFeatures> fourList = regionFeatureService.selectFeaturesByBriefClassification(4);
		/*for (BRegionalFeatures one : oneList) {	
			String str1 = one.getfRichTextContent().substring(0, one.getfRichTextContent().indexOf("img"));
			String str2 = str1.substring(0, str1.length()-1);
			String str3 = one.getfRichTextContent().substring(one.getfRichTextContent().indexOf("img"), one.getfRichTextContent().length());
			int start = Pattern.compile(">").matcher(str3).start();
			String str4 = str3.substring(start, str1.length());
		}*/
		model.addAttribute("oneList", oneList);
		model.addAttribute("twoList", twoList);
		model.addAttribute("threeList", threeList);
		model.addAttribute("fourList", fourList);
		return "";
    }
	
	/**
	 * 修改特色图片
	 * @param bRegionalFeatures
	 * @param fBriefClassification
	 * @param fId
	 * @return BroadcastResult
	 */
	@RequestMapping("/update")
    @ResponseBody
    public BroadcastResult update(BRegionalFeatures bRegionalFeatures,Integer fBriefClassification,Integer fId) {
		bRegionalFeatures.setfId(fId);
		bRegionalFeatures.setfBriefClassification(fBriefClassification);

        boolean result = regionFeatureService.update(bRegionalFeatures);
        if (result) {
            return BroadcastResult.build(200, "修改成功");
        } else {
            return BroadcastResult.build(200, "修改失败");
        }
    }
	
	/**
	 * 删除特色图片
	 * @param idList
	 * @param fBriefClassification
	 * @return BroadcastResult
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public BroadcastResult delete(@RequestParam(value="ids") List<Integer> idList,Integer fBriefClassification){
		return BroadcastResult.build(200,"删除了" + regionFeatureService.deleteRegionFeatureByIds(idList, fBriefClassification) + "条记录");
	}
	
	/*@RequestMapping("/deleteReview")
	@ResponseBody
	public BroadcastResult deletereview(Integer fBriefClassification){
		return BroadcastResult.build(200,"删除了" + regionFeatureService.deleteRegionFeatureByBriefClassification(fBriefClassification) + "条记录");
	}*/
	
	@Value("${upload.prefix.url}")
    private String uploadPrefixUrl;
	
	/**
	 * 图片上传
	 * @param multipartFile
	 * @param request
	 * @return WangEditorVO
	 */
	@RequestMapping(value = "/upload")
	@ResponseBody
	public WangEditorVO uploadFile(
			@RequestParam("myFile") MultipartFile multipartFile,
			HttpServletRequest request) {
 
		try {
			// 获取项目路径
			String realPath = request.getSession().getServletContext().getRealPath("/");
			InputStream inputStream = multipartFile.getInputStream();
			//String contextPath = request.getContextPath();
			// 服务器根目录的路径
			//String path = realPath.replace(contextPath.substring(1), "");
			// 根目录下新建文件夹upload，存放上传图片
			String uploadPath = realPath + "upload/image";
			// 获取文件名称			
			String filename = multipartFile.getOriginalFilename();	
			//后缀
			String suffix = filename.substring(filename.lastIndexOf("."), filename.length());
			//文件路径
			String getpath = File.separator + UUID.randomUUID().toString() + suffix;
			// 将文件上传的服务器根目录下的upload文件夹
			File file = new File(uploadPath, getpath);
			FileUtils.copyInputStreamToFile(inputStream, file);
			//String loadUrl = request.getSession().getServletContext().getRealPath("/");
			// 返回图片访问路径
			/*String url = request.getScheme() + "://" + request.getServerName()
					+ ":" + request.getServerPort() + "/upload/" + filename;*/
			
			//String url = uploadPrefixUrl + "upload/" + filename;
			
			String url = uploadPrefixUrl +"upload/image" + getpath;
			
			String [] str = {url};
			WangEditorVO we = new WangEditorVO(str);
			return we;
		} catch (IOException e) {
			logger.error("上传文件失败", e);
		}
		return null;
	}
	
}
