package cn.wtu.broadcast.controller;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import cn.wtu.broadcast.openapi.api.SystemConfigurationService;
import cn.wtu.broadcast.openapi.model.TSystemConfiguration;
import cn.wtu.broadcast.openapi.thread.SocketThread;
import cn.wtu.broadcast.parent.vo.EBCONTParamsVO;

/**
 * 将socket service随tomcat启动
 *
 */
public class SocketServiceLoader implements ServletContextListener {
	private SocketThread socketThread;

	@Override
	public void contextDestroyed(ServletContextEvent arg0) {
		if (null != socketThread) {
			//socketThread.closeSocketServer();
		}
	}

	@Override
	public void contextInitialized(ServletContextEvent sce) {
		if (null == socketThread) {
			WebApplicationContext context = WebApplicationContextUtils.getRequiredWebApplicationContext(sce.getServletContext());
			SystemConfigurationService systemConfigurationService = context.getBean(SystemConfigurationService.class);
			TSystemConfiguration systemConfiguration = systemConfigurationService.selectDataByCName("transmit_server_url");
			String ipServerIP = systemConfiguration.getfConfigurationValue();
			TSystemConfiguration tsystemConfiguration = systemConfigurationService.selectDataByCName("platform_resource_code");
			EBCONTParamsVO ebCONTParamsVO = systemConfigurationService.getConfiguration();
			String platformResourceCode = tsystemConfiguration.getfConfigurationValue();
			String privateKey = ebCONTParamsVO.getPrivateKey();
			TSystemConfiguration port = systemConfigurationService.selectDataByCName("transmit_server_port");
			Integer serverPort = Integer.valueOf(port.getfConfigurationValue());
			TSystemConfiguration timeZoneSet = systemConfigurationService.selectDataByCName("timeZone_set");
			String timeZone = timeZoneSet.getfConfigurationValue();
			// 新建线程类
			socketThread = new SocketThread(null, serverPort, platformResourceCode, privateKey, ipServerIP, timeZone);
			SocketThreadListener listen = new SocketThreadListener();
			socketThread.addObserver(listen);
			new Thread(socketThread).start();
		}
	}
}
